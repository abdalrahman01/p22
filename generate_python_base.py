import ast

HEADERS="""
#####################################################################
#     CODE GENERATED BY            #  Free Palestine <3 <3 <3       #
#     CodeLlama-7b-python-hf       ##################################
#                                                                   #
#     CREATED BY Abd Alrahman Atieh (abdalrahman.atieh@gmail.com)   #  
#     A part of the bachelor project 22, att Halmstad University    #
#####################################################################

import bpy
from infinigen.assets.kitchen import spoon, knife, fork, cup, dish
bpy.ops.object.select_all(action='SELECT')
import os 
bpy.context.scene.unit_settings.length_unit = "CENTIMETERS"
bpy.context.scene.unit_settings.scale_length = 0.001
bpy.ops.object.delete(use_global=False, confirm=False) # Clear Scene
"""

FOOTER="""bpy.ops.object.select_all(action='SELECT')
export_path = os.path.join(os.getcwd(), "/opt/public/models/generated_3d.gltf")
bpy.ops.export_scene.gltf(filepath=export_path)
"""

SYNTAX_ERROR = -1
PARSE_SUCCESS = 0


class BlenderPythonGenerator:
    def __init__(self, code=""):
        self.code = code
    def reset(self):
        self.code = ""
    def add_code(self, code) -> str:
        if self.syntax_check(code) == SYNTAX_ERROR:
            return "Syntax Error"
        self.code += code + "\n"
        return 
    def generate(self) -> str:
        return HEADERS + self.code + FOOTER
    
    def syntax_check(self, code):
        try:
            ast.parse(code)
            return PARSE_SUCCESS
        except SyntaxError:
            return SYNTAX_ERROR
        
    def write_python(self, filename):
        with open(filename, "w") as f:
            f.write(self.generate())

